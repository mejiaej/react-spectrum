{"mappings":";;AAAA;;;;;;;;;;CAUC;AAKM,MAAM,4CAA0B;AAShC,eAAe,yCAAiB,IAAwG;IAC7I,kHAAkH;IAClH,gIAAgI;IAChI,0DAA0D;IAC1D,IAAI,WAAC,OAAO,gBAAE,YAAY,eAAE,cAAc,CAAC,GAAE,GAAG;IAChD,MAAM,CAAA,GAAA,gBAAQ,EAAE,WAAW,CAAC,SAAS;QAAC,aAAa;QAAS,GAAG,WAAW;IAAA;IAC1E,MAAM,CAAA,GAAA,UAAE,EAAE,UAAY,MAAM,aAAa;IACzC,MAAM,CAAA,GAAA,gBAAQ,EAAE,SAAS,CAAC,SAAS;QAAC,aAAa;QAAS,GAAG,WAAW;IAAA;AAC1E;AAGO,eAAe,0CAAa,IAAI,EAAE,OAAoB,EAAE,eAA4C;IACzG,IAAI,oBAAoB,SACtB,MAAM,KAAK,KAAK,CAAC;SACZ,IAAI,oBAAoB,YAAY;QACzC,yIAAyI;QACzI,iFAAiF;QACjF,qIAAqI;QACrI,CAAA,GAAA,UAAE,EAAE,IAAM,QAAQ,KAAK;QACvB,MAAM,KAAK,QAAQ,CAAC;IACtB,OAAO,IAAI,oBAAoB,SAC7B,MAAM,KAAK,OAAO,CAAC;QAAC,QAAQ;QAAS,MAAM;IAAU;AAEzD","sources":["packages/@react-aria/test-utils/src/events.ts"],"sourcesContent":["/*\n * Copyright 2023 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {act, fireEvent} from '@testing-library/react';\nimport {UserOpts} from './user';\n\nexport const DEFAULT_LONG_PRESS_TIME = 500;\n\n/**\n * Simulates a \"long press\" event on a element.\n * @param opts - Options for the long press.\n * @param opts.element - Element to long press.\n * @param opts.advanceTimer - Function that when called advances the timers in your test suite by a specific amount of time(ms).\n * @param opts.pointeropts - Options to pass to the simulated event. Defaults to mouse. See https://testing-library.com/docs/dom-testing-library/api-events/#fireevent for more info.\n */\nexport async function triggerLongPress(opts: {element: HTMLElement, advanceTimer: (time?: number) => void | Promise<unknown>, pointerOpts?: {}}) {\n  // TODO: note that this only works if the code from installPointerEvent is called somewhere in the test BEFORE the\n  // render. Perhaps we should rely on the user setting that up since I'm not sure there is a great way to set that up here in the\n  // util before first render. Will need to document it well\n  let {element, advanceTimer, pointerOpts = {}} = opts;\n  await fireEvent.pointerDown(element, {pointerType: 'mouse', ...pointerOpts});\n  await act(async () => await advanceTimer(DEFAULT_LONG_PRESS_TIME));\n  await fireEvent.pointerUp(element, {pointerType: 'mouse', ...pointerOpts});\n}\n\n\nexport async function pressElement(user, element: HTMLElement, interactionType: UserOpts['interactionType']) {\n  if (interactionType === 'mouse') {\n    await user.click(element);\n  } else if (interactionType === 'keyboard') {\n    // TODO: For the keyboard flow, I wonder if it would be reasonable to just do fireEvent directly on the obtained row node or if we should\n    // stick to simulting an actual user's keyboard operations as closely as possible\n    // There are problems when using this approach though, actions like trying to trigger the select all checkbox and stuff behave oddly.\n    act(() => element.focus());\n    await user.keyboard('[Space]');\n  } else if (interactionType === 'touch') {\n    await user.pointer({target: element, keys: '[TouchA]'});\n  }\n}\n"],"names":[],"version":3,"file":"events.module.js.map"}