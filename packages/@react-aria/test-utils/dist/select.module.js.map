{"mappings":";;AAAA;;;;;;;;;;CAUC;AASM,MAAM;IAwHX,IAAI,UAAU;QACZ,OAAO,IAAI,CAAC,QAAQ;IACtB;IAEA,IAAI,UAAU;QACZ,IAAI,YAAY,IAAI,CAAC,OAAO,CAAC,YAAY,CAAC;QAC1C,OAAO,YAAY,SAAS,cAAc,CAAC,aAAa;IAC1D;IAEA,IAAI,UAAU;QACZ,IAAI,UAAU,IAAI,CAAC,OAAO;QAC1B,OAAO,UAAU,CAAA,GAAA,aAAK,EAAE,SAAS,cAAc,CAAC,YAAY,EAAE;IAChE;IAEA,IAAI,WAAW;QACb,IAAI,UAAU,IAAI,CAAC,OAAO;QAC1B,OAAO,UAAU,CAAA,GAAA,aAAK,EAAE,SAAS,cAAc,CAAC,WAAW,EAAE;IAC/D;IApIA,YAAY,IAAmB,CAAE;aAYjC,qBAAqB,CAAC;YACpB,IAAI,CAAC,gBAAgB,GAAG;QAC1B;aAEA,OAAO,OAAO,OAAwD,CAAC,CAAC;YACtE,IAAI,mBACF,kBAAkB,IAAI,CAAC,gBAAgB,EACxC,GAAG;YACJ,IAAI,UAAU,IAAI,CAAC,OAAO;YAC1B,IAAI,aAAa,QAAQ,YAAY,CAAC;YAEtC,IAAI,oBAAoB,SACtB,MAAM,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,QAAQ;iBAC9B,IAAI,oBAAoB,YAAY;gBACzC,CAAA,GAAA,UAAE,EAAE,IAAM,QAAQ,KAAK;gBACvB,MAAM,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC;YAC3B,OAAO,IAAI,oBAAoB,SAC7B,MAAM,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC;gBAAC,QAAQ,IAAI,CAAC,QAAQ;gBAAE,MAAM;YAAU;YAGlE,MAAM,CAAA,GAAA,cAAM,EAAE;gBACZ,IAAI,CAAC,cAAc,QAAQ,YAAY,CAAC,oBAAoB,MAC1D,MAAM,IAAI,MAAM;qBAEhB,OAAO;YAEX;YACA,IAAI,YAAY,QAAQ,YAAY,CAAC;YACrC,MAAM,CAAA,GAAA,cAAM,EAAE;gBACZ,IAAI,CAAC,cAAe,CAAA,CAAC,aAAa,SAAS,cAAc,CAAC,cAAc,IAAG,GACzE,MAAM,IAAI,MAAM,CAAC,mBAAmB,EAAE,UAAU,uBAAuB,CAAC;qBAExE,OAAO;YAEX;QACF;aAEA,eAAe,OAAO;YACpB,IAAI,cACF,UAAU,mBACV,kBAAkB,IAAI,CAAC,gBAAgB,EACxC,GAAG,QAAQ,CAAC;YACb,IAAI,UAAU,IAAI,CAAC,OAAO;YAC1B,IAAI,CAAC,QAAQ,YAAY,CAAC,kBACxB,MAAM,IAAI,CAAC,IAAI;YAEjB,IAAI,UAAU,IAAI,CAAC,OAAO;YAC1B,IAAI,SAAS;gBACX,IAAI,SAAS,CAAA,GAAA,aAAK,EAAE,SAAS,SAAS,CAAC;gBACvC,IAAI,oBAAoB,YAAY;oBAClC,IAAI,SAAS,aAAa,KAAK,WAAW,CAAC,QAAQ,QAAQ,CAAC,SAAS,aAAa,GAChF,CAAA,GAAA,UAAE,EAAE,IAAM,QAAQ,KAAK;oBAGzB,yHAAyH;oBACzH,aAAa;oBACb,MAAM,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC;oBACzB,MAAM,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC;gBAC3B,OACE,mKAAmK;gBACnK,IAAI,oBAAoB,SACtB,MAAM,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC;qBAEtB,MAAM,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC;oBAAC,QAAQ;oBAAQ,MAAM;gBAAU;gBAI7D,IAAI,OAAO,YAAY,CAAC,WAAW,MAAM;oBACvC,MAAM,CAAA,GAAA,cAAM,EAAE;wBACZ,IAAI,SAAS,aAAa,KAAK,IAAI,CAAC,QAAQ,EAC1C,MAAM,IAAI,MAAM,CAAC,yGAAyG,EAAE,SAAS,aAAa,EAAE;6BAEpJ,OAAO;oBAEX;oBAEA,IAAI,SAAS,QAAQ,CAAC,UACpB,MAAM,IAAI,MAAM;gBAEpB;YACF;QACF;aAEA,QAAQ;YACN,IAAI,UAAU,IAAI,CAAC,OAAO;YAC1B,IAAI,SAAS;gBACX,CAAA,GAAA,UAAE,EAAE,IAAM,QAAQ,KAAK;gBACvB,MAAM,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC;YAC3B;YAEA,MAAM,CAAA,GAAA,cAAM,EAAE;gBACZ,IAAI,SAAS,aAAa,KAAK,IAAI,CAAC,QAAQ,EAC1C,MAAM,IAAI,MAAM,CAAC,iHAAiH,EAAE,SAAS,aAAa,EAAE;qBAE5J,OAAO;YAEX;YAEA,IAAI,WAAW,SAAS,QAAQ,CAAC,UAC/B,MAAM,IAAI,MAAM;QAEpB;QAhHE,IAAI,QAAC,IAAI,QAAE,IAAI,mBAAE,eAAe,EAAC,GAAG;QACpC,IAAI,CAAC,IAAI,GAAG;QACZ,IAAI,CAAC,gBAAgB,GAAG,mBAAmB;QAC3C,8FAA8F;QAC9F,IAAI,gBAAgB,CAAA,GAAA,aAAK,EAAE,MAAM,WAAW,CAAC;QAC7C,IAAI,iBAAiB,MACnB,gBAAgB;QAElB,IAAI,CAAC,QAAQ,GAAG;IAClB;AA2HF","sources":["packages/@react-aria/test-utils/src/select.ts"],"sourcesContent":["/*\n * Copyright 2024 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {act, waitFor, within} from '@testing-library/react';\nimport {BaseTesterOpts, UserOpts} from './user';\n\nexport interface SelectOptions extends UserOpts, BaseTesterOpts {\n  // TODO: I think the type grabbed from the testing library dist for UserEvent is breaking the build, will need to figure out a better place to grab from\n  user?: any\n}\nexport class SelectTester {\n  private user;\n  private _interactionType: UserOpts['interactionType'];\n  private _trigger: HTMLElement;\n\n  constructor(opts: SelectOptions) {\n    let {root, user, interactionType} = opts;\n    this.user = user;\n    this._interactionType = interactionType || 'mouse';\n    // Handle case where the wrapper element is provided rather than the Select's button (aka RAC)\n    let triggerButton = within(root).queryByRole('button');\n    if (triggerButton == null) {\n      triggerButton = root;\n    }\n    this._trigger = triggerButton;\n  }\n\n  setInteractionType = (type: UserOpts['interactionType']) => {\n    this._interactionType = type;\n  };\n\n  open = async (opts: {interactionType?: UserOpts['interactionType']} = {}) => {\n    let {\n      interactionType = this._interactionType\n    } = opts;\n    let trigger = this.trigger;\n    let isDisabled = trigger.hasAttribute('disabled');\n\n    if (interactionType === 'mouse') {\n      await this.user.click(this._trigger);\n    } else if (interactionType === 'keyboard') {\n      act(() => trigger.focus());\n      await this.user.keyboard('[Enter]');\n    } else if (interactionType === 'touch') {\n      await this.user.pointer({target: this._trigger, keys: '[TouchA]'});\n    }\n\n    await waitFor(() => {\n      if (!isDisabled && trigger.getAttribute('aria-controls') == null) {\n        throw new Error('No aria-controls found on select element trigger.');\n      } else {\n        return true;\n      }\n    });\n    let listBoxId = trigger.getAttribute('aria-controls');\n    await waitFor(() => {\n      if (!isDisabled && (!listBoxId || document.getElementById(listBoxId) == null)) {\n        throw new Error(`ListBox with id of ${listBoxId} not found in document.`);\n      } else {\n        return true;\n      }\n    });\n  };\n\n  selectOption = async (opts: {optionText: string, interactionType?: UserOpts['interactionType']}) => {\n    let {\n      optionText,\n      interactionType = this._interactionType\n    } = opts || {};\n    let trigger = this.trigger;\n    if (!trigger.getAttribute('aria-controls')) {\n      await this.open();\n    }\n    let listbox = this.listbox;\n    if (listbox) {\n      let option = within(listbox).getByText(optionText);\n      if (interactionType === 'keyboard') {\n        if (document.activeElement !== listbox || !listbox.contains(document.activeElement)) {\n          act(() => listbox.focus());\n        }\n\n        // TODO: this simulates typeahead, do we want to add a helper util for that? Not sure if users would really need that for\n        // their test\n        await this.user.keyboard(optionText);\n        await this.user.keyboard('[Enter]');\n      } else {\n        // TODO: what if the user needs to scroll the list to find the option? What if there are multiple matches for text (hopefully the picker options are pretty unique)\n        if (interactionType === 'mouse') {\n          await this.user.click(option);\n        } else {\n          await this.user.pointer({target: option, keys: '[TouchA]'});\n        }\n      }\n\n      if (option.getAttribute('href') == null) {\n        await waitFor(() => {\n          if (document.activeElement !== this._trigger) {\n            throw new Error(`Expected the document.activeElement after selecting an option to be the select component trigger but got ${document.activeElement}`);\n          } else {\n            return true;\n          }\n        });\n\n        if (document.contains(listbox)) {\n          throw new Error('Expected select element listbox to not be in the document after selecting an option');\n        }\n      }\n    }\n  };\n\n  close = async () => {\n    let listbox = this.listbox;\n    if (listbox) {\n      act(() => listbox.focus());\n      await this.user.keyboard('[Escape]');\n    }\n\n    await waitFor(() => {\n      if (document.activeElement !== this._trigger) {\n        throw new Error(`Expected the document.activeElement after closing the select dropdown to be the select component trigger but got ${document.activeElement}`);\n      } else {\n        return true;\n      }\n    });\n\n    if (listbox && document.contains(listbox)) {\n      throw new Error('Expected the select element listbox to not be in the document after closing the dropdown.');\n    }\n  };\n\n  get trigger() {\n    return this._trigger;\n  }\n\n  get listbox() {\n    let listBoxId = this.trigger.getAttribute('aria-controls');\n    return listBoxId ? document.getElementById(listBoxId) : undefined;\n  }\n\n  get options() {\n    let listbox = this.listbox;\n    return listbox ? within(listbox).queryAllByRole('option') : [];\n  }\n\n  get sections() {\n    let listbox = this.listbox;\n    return listbox ? within(listbox).queryAllByRole('group') : [];\n  }\n}\n"],"names":[],"version":3,"file":"select.module.js.map"}