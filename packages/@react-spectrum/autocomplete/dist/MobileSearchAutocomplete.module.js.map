{"mappings":"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","sources":["packages/@react-spectrum/autocomplete/src/MobileSearchAutocomplete.tsx"],"sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport AlertMedium from '@spectrum-icons/ui/AlertMedium';\nimport {AriaButtonProps} from '@react-types/button';\nimport CheckmarkMedium from '@spectrum-icons/ui/CheckmarkMedium';\nimport {classNames, useFocusableRef} from '@react-spectrum/utils';\nimport {ClearButton} from '@react-spectrum/button';\nimport {ComboBoxState, useComboBoxState} from '@react-stately/combobox';\nimport {DismissButton, useOverlayTrigger} from '@react-aria/overlays';\nimport {Field} from '@react-spectrum/label';\nimport {FocusableRef, ValidationState} from '@react-types/shared';\nimport {focusSafely, FocusScope, useFocusRing} from '@react-aria/focus';\n// @ts-ignore\nimport intlMessages from '../intl/*.json';\nimport {ListBoxBase, useListBoxLayout} from '@react-spectrum/listbox';\nimport Magnifier from '@spectrum-icons/ui/Magnifier';\nimport {mergeProps, useFormReset, useId} from '@react-aria/utils';\nimport {ProgressCircle} from '@react-spectrum/progress';\nimport React, {\n  HTMLAttributes,\n  InputHTMLAttributes,\n  ReactElement,\n  ReactNode,\n  useCallback,\n  useEffect,\n  useRef,\n  useState\n} from 'react';\nimport searchAutocompleteStyles from './searchautocomplete.css';\nimport searchStyles from '@adobe/spectrum-css-temp/components/search/vars.css';\nimport {setInteractionModality, useHover} from '@react-aria/interactions';\nimport {SpectrumSearchAutocompleteProps} from '@react-types/autocomplete';\nimport styles from '@adobe/spectrum-css-temp/components/inputgroup/vars.css';\nimport {TextFieldBase} from '@react-spectrum/textfield';\nimport textfieldStyles from '@adobe/spectrum-css-temp/components/textfield/vars.css';\nimport {Tray} from '@react-spectrum/overlays';\nimport {useButton} from '@react-aria/button';\nimport {useDialog} from '@react-aria/dialog';\nimport {useField} from '@react-aria/label';\nimport {useFilter, useLocalizedStringFormatter} from '@react-aria/i18n';\nimport {useFormValidation} from '@react-aria/form';\nimport {useProviderProps} from '@react-spectrum/provider';\nimport {useSearchAutocomplete} from '@react-aria/autocomplete';\n\nfunction ForwardMobileSearchAutocomplete<T extends object>(props: SpectrumSearchAutocompleteProps<T>, ref: FocusableRef<HTMLElement>) {\n  props = useProviderProps(props);\n\n  let {\n    isQuiet,\n    isDisabled,\n    isRequired,\n    validationBehavior,\n    validate,\n    name,\n    isReadOnly,\n    onSubmit = () => {}\n  } = props;\n\n  let {contains} = useFilter({sensitivity: 'base'});\n  let state = useComboBoxState({\n    ...props,\n    defaultFilter: contains,\n    allowsEmptyCollection: true,\n    // Needs to be false here otherwise we double up on commitSelection/commitCustomValue calls when\n    // user taps on underlay (i.e. initial tap will call setFocused(false) -> commitSelection/commitCustomValue via onBlur,\n    // then the closing of the tray will call setFocused(false) again due to cleanup effect)\n    shouldCloseOnBlur: false,\n    allowsCustomValue: true,\n    onSelectionChange: (key) => key !== null && onSubmit(null, key),\n    selectedKey: undefined,\n    defaultSelectedKey: undefined,\n    validate: useCallback(v => validate?.(v.inputValue), [validate])\n  });\n\n  let buttonRef = useRef<HTMLDivElement>(null);\n  let domRef = useFocusableRef(ref, buttonRef);\n  let {triggerProps, overlayProps} = useOverlayTrigger({type: 'listbox'}, state, buttonRef);\n\n  let inputRef = useRef<HTMLInputElement>(null);\n  useFormValidation({\n    ...props,\n    focus: () => buttonRef.current?.focus()\n  }, state, inputRef);\n  let {isInvalid, validationErrors, validationDetails} = state.displayValidation;\n  let validationState = props.validationState || (isInvalid ? 'invalid' : undefined);\n  let errorMessage = props.errorMessage ?? validationErrors.join(' ');\n\n  let {labelProps, fieldProps, descriptionProps, errorMessageProps} = useField({\n    ...props,\n    labelElementType: 'span',\n    isInvalid,\n    errorMessage\n  });\n\n  // Focus the button and show focus ring when clicking on the label\n  labelProps.onClick = () => {\n    if (!props.isDisabled && buttonRef.current) {\n      buttonRef.current.focus();\n      setInteractionModality('keyboard');\n    }\n  };\n\n  let inputProps: InputHTMLAttributes<HTMLInputElement> = {\n    type: 'hidden',\n    name,\n    value: state.inputValue\n  };\n\n  if (validationBehavior === 'native') {\n    // Use a hidden <input type=\"text\"> rather than <input type=\"hidden\">\n    // so that an empty value blocks HTML form submission when the field is required.\n    inputProps.type = 'text';\n    inputProps.hidden = true;\n    inputProps.required = isRequired;\n    // Ignore react warning.\n    inputProps.onChange = () => {};\n  }\n\n  useFormReset(inputRef, state.inputValue, state.setInputValue);\n\n  return (\n    <>\n      <Field\n        {...props}\n        labelProps={labelProps}\n        descriptionProps={descriptionProps}\n        errorMessageProps={errorMessageProps}\n        isInvalid={isInvalid}\n        validationErrors={validationErrors}\n        validationDetails={validationDetails}\n        elementType=\"span\"\n        ref={domRef}\n        includeNecessityIndicatorInAccessibilityName>\n        <SearchAutocompleteButton\n          {...mergeProps(triggerProps, fieldProps, {autoFocus: props.autoFocus, icon: props.icon})}\n          ref={buttonRef}\n          isQuiet={isQuiet}\n          isDisabled={isDisabled}\n          isReadOnly={isReadOnly}\n          isPlaceholder={!state.inputValue}\n          validationState={validationState}\n          inputValue={state.inputValue}\n          clearInput={() => state.setInputValue('')}\n          onPress={() => !isReadOnly && state.open(null, 'manual')}>\n          {state.inputValue || props.placeholder || ''}\n        </SearchAutocompleteButton>\n      </Field>\n      <input {...inputProps} ref={inputRef} />\n      <Tray state={state} isFixedHeight {...overlayProps}>\n        <SearchAutocompleteTray\n          {...props}\n          onClose={state.close}\n          overlayProps={overlayProps}\n          state={state} />\n      </Tray>\n    </>\n  );\n}\n\nexport let MobileSearchAutocomplete = React.forwardRef(ForwardMobileSearchAutocomplete) as <T>(props: SpectrumSearchAutocompleteProps<T> & {ref?: FocusableRef<HTMLElement>}) => ReactElement;\n\n\ninterface SearchAutocompleteButtonProps extends AriaButtonProps {\n  icon?: ReactElement | null,\n  isQuiet?: boolean,\n  isDisabled?: boolean,\n  isReadOnly?: boolean,\n  isPlaceholder?: boolean,\n  validationState?: ValidationState,\n  inputValue?: string,\n  clearInput?: () => void,\n  children?: ReactNode,\n  style?: React.CSSProperties,\n  className?: string\n}\n\n// any type is because we don't want to call useObjectRef because this is an internal component and we know\n// we are always passing an object ref\nconst SearchAutocompleteButton = React.forwardRef(function SearchAutocompleteButton(props: SearchAutocompleteButtonProps, ref: any) {\n  let searchIcon = (\n    <Magnifier data-testid=\"searchicon\" />\n  );\n\n  let {\n    icon = searchIcon,\n    isQuiet,\n    isDisabled,\n    isReadOnly,\n    isPlaceholder,\n    validationState,\n    inputValue,\n    clearInput,\n    children,\n    style,\n    className\n} = props;\n  let stringFormatter = useLocalizedStringFormatter(intlMessages, '@react-spectrum/autocomplete');\n  let valueId = useId();\n  let invalidId = useId();\n  let validationIcon = validationState === 'invalid'\n    ? <AlertMedium id={invalidId} aria-label={stringFormatter.format('invalid')} />\n    : <CheckmarkMedium />;\n\n  if (icon) {\n    icon = React.cloneElement(icon, {\n      UNSAFE_className: classNames(\n        textfieldStyles,\n        'spectrum-Textfield-icon'\n      ),\n      size: 'S'\n    });\n  }\n\n  let clearButton = (\n    <ClearButton\n      onPress={(e) => {\n        clearInput?.();\n        props?.onPress?.(e);\n      }}\n      preventFocus\n      aria-label={stringFormatter.format('clear')}\n      excludeFromTabOrder\n      UNSAFE_className={\n        classNames(\n          searchStyles,\n          'spectrum-ClearButton'\n        )\n      }\n      isDisabled={isDisabled} />\n  );\n\n  let validation = React.cloneElement(validationIcon, {\n    UNSAFE_className: classNames(\n      textfieldStyles,\n      'spectrum-Textfield-validationIcon',\n      classNames(\n        styles,\n        'spectrum-InputGroup-input-validationIcon'\n      ),\n      classNames(\n        searchStyles,\n        'spectrum-Search-validationIcon'\n      )\n    )\n  });\n\n  let {hoverProps, isHovered} = useHover({});\n  let {isFocused, isFocusVisible, focusProps} = useFocusRing();\n  let {buttonProps} = useButton({\n    ...props,\n    'aria-labelledby': [\n      props['aria-labelledby'],\n      props['aria-label'] && !props['aria-labelledby'] ? props.id : null,\n      valueId,\n      validationState === 'invalid' ? invalidId : null\n    ].filter(Boolean).join(' '),\n    elementType: 'div'\n  }, ref);\n\n  return (\n    <div\n      {...mergeProps(hoverProps, focusProps, buttonProps)}\n      aria-haspopup=\"dialog\"\n      ref={ref}\n      style={{...style, outline: 'none'}}\n      className={\n        classNames(\n          styles,\n          'spectrum-InputGroup',\n          {\n            'spectrum-InputGroup--quiet': isQuiet,\n            'is-disabled': isDisabled,\n            'spectrum-InputGroup--invalid': validationState === 'invalid' && !isDisabled,\n            'is-hovered': isHovered,\n            'is-focused': isFocused,\n            'focus-ring': isFocusVisible\n          },\n          classNames(\n            searchAutocompleteStyles,\n            'searchautocomplete',\n            'mobile-searchautocomplete'\n          ),\n          className\n        )\n      }>\n      <div\n        className={\n          classNames(\n            textfieldStyles,\n            'spectrum-Textfield',\n            {\n              'spectrum-Textfield--invalid': validationState === 'invalid' && !isDisabled,\n              'spectrum-Textfield--valid': validationState === 'valid' && !isDisabled,\n              'spectrum-Textfield--quiet': isQuiet\n            },\n            classNames(\n              searchStyles,\n              'spectrum-Search',\n              'spectrum-Search--loadable',\n              {\n                'is-disabled': isDisabled,\n                'is-quiet': isQuiet,\n                'spectrum-Search--invalid': validationState === 'invalid' && !isDisabled,\n                'spectrum-Search--valid': validationState === 'valid' && !isDisabled\n              }\n            ),\n            classNames(\n              styles,\n              'spectrum-InputGroup-field'\n            )\n          )\n        }>\n        <div\n          className={\n            classNames(\n              textfieldStyles,\n              'spectrum-Textfield-input',\n              {\n                'spectrum-Textfield-inputIcon': !!icon,\n                'is-hovered': isHovered,\n                'is-placeholder': isPlaceholder,\n                'is-disabled': isDisabled,\n                'is-quiet': isQuiet,\n                'is-focused': isFocused\n              },\n              classNames(\n                searchStyles,\n                'spectrum-Search-input'\n              ),\n              classNames(\n                searchAutocompleteStyles,\n                'mobile-input'\n              )\n            )\n          }>\n          {icon}\n          <span\n            id={valueId}\n            className={\n              classNames(\n                searchAutocompleteStyles,\n                'mobile-value'\n              )\n            }>\n            {children}\n          </span>\n        </div>\n        {validationState && !isDisabled ? validation : null}\n        {(inputValue !== '' || validationState != null) && !isReadOnly && clearButton}\n      </div>\n    </div>\n  );\n});\n\ninterface SearchAutocompleteTrayProps<T> extends SpectrumSearchAutocompleteProps<T> {\n  state: ComboBoxState<T>,\n  overlayProps: HTMLAttributes<HTMLElement>,\n  loadingIndicator?: ReactElement,\n  onClose: () => void\n}\n\nfunction SearchAutocompleteTray<T>(props: SearchAutocompleteTrayProps<T>) {\n  let searchIcon = (\n    <Magnifier data-testid=\"searchicon\" />\n  );\n\n  let {\n    // completionMode = 'suggest',\n    state,\n    icon = searchIcon,\n    isDisabled,\n    validationState,\n    label,\n    overlayProps,\n    loadingState,\n    onLoadMore,\n    onClose,\n    onSubmit\n  } = props;\n\n  let timeout = useRef<ReturnType<typeof setTimeout> | null>(null);\n  let [showLoading, setShowLoading] = useState(false);\n  let inputRef = useRef<HTMLInputElement>(null);\n  let popoverRef = useRef<HTMLDivElement>(null);\n  let listBoxRef = useRef<HTMLDivElement>(null);\n  let isLoading = loadingState === 'loading' || loadingState === 'loadingMore';\n  let layout = useListBoxLayout();\n  let stringFormatter = useLocalizedStringFormatter(intlMessages, '@react-spectrum/autocomplete');\n\n  let {inputProps, listBoxProps, labelProps, clearButtonProps} = useSearchAutocomplete<T>(\n    {\n      ...props,\n      layoutDelegate: layout,\n      popoverRef: popoverRef,\n      listBoxRef,\n      inputRef,\n      // Handled outside the tray.\n      name: undefined\n    },\n    state\n  );\n\n  React.useEffect(() => {\n    if (inputRef.current) {\n      focusSafely(inputRef.current);\n    }\n  }, []);\n\n  React.useEffect(() => {\n    // When the tray closes, set state.isFocused (i.e. the tray input's focus tracker) to false.\n    // This is to prevent state.isFocused from being set to true when the tray closes via tapping on the underlay\n    // (FocusScope attempts to restore focus to the tray input when tapping outside the tray due to \"contain\")\n    // Have to do this manually since React doesn't call onBlur when a component is unmounted: https://github.com/facebook/react/issues/12363\n    if (!state.isOpen && state.isFocused) {\n      state.setFocused(false);\n    }\n  });\n\n  let {dialogProps} = useDialog({\n    'aria-labelledby': useId(labelProps.id)\n  }, popoverRef);\n\n  // Override the role of the input to \"searchbox\" instead of \"combobox\".\n  // Since the listbox is always visible, the combobox role doesn't really give us anything.\n  // VoiceOver on iOS reads \"double tap to collapse\" when focused on the input rather than\n  // \"double tap to edit text\", as with a textbox or searchbox. We'd like double tapping to\n  // open the virtual keyboard rather than closing the tray.\n  inputProps.role = 'searchbox';\n  inputProps['aria-haspopup'] = 'listbox';\n  delete inputProps.onTouchEnd;\n\n  let clearButton = (\n    <ClearButton\n      {...clearButtonProps}\n      preventFocus\n      aria-label={stringFormatter.format('clear')}\n      excludeFromTabOrder\n      UNSAFE_className={\n        classNames(\n          searchStyles,\n          'spectrum-ClearButton'\n        )\n      }\n      isDisabled={isDisabled} />\n  );\n\n  let loadingCircle = (\n    <ProgressCircle\n      aria-label={stringFormatter.format('loading')}\n      size=\"S\"\n      isIndeterminate\n      UNSAFE_className={classNames(\n        searchStyles,\n        'spectrum-Search-circleLoader',\n        classNames(\n          textfieldStyles,\n          'spectrum-Textfield-circleLoader'\n        )\n      )} />\n  );\n\n  // Close the software keyboard on scroll to give the user a bigger area to scroll.\n  // But only do this if scrolling with touch, otherwise it can cause issues with touch\n  // screen readers.\n  let isTouchDown = useRef(false);\n  let onTouchStart = () => {\n    isTouchDown.current = true;\n  };\n\n  let onTouchEnd = () => {\n    isTouchDown.current = false;\n  };\n\n  let onScroll = useCallback(() => {\n    if (!inputRef.current || document.activeElement !== inputRef.current || !isTouchDown.current) {\n      return;\n    }\n\n    if (popoverRef.current) {\n      popoverRef.current.focus();\n    }\n  }, [inputRef, popoverRef, isTouchDown]);\n\n  let inputValue = inputProps.value;\n  let lastInputValue = useRef(inputValue);\n  useEffect(() => {\n    if (loadingState === 'filtering' && !showLoading) {\n      if (timeout.current === null) {\n        timeout.current = setTimeout(() => {\n          setShowLoading(true);\n        }, 500);\n      }\n\n      // If user is typing, clear the timer and restart since it is a new request\n      if (inputValue !== lastInputValue.current) {\n        clearTimeout(timeout.current);\n        timeout.current = setTimeout(() => {\n          setShowLoading(true);\n        }, 500);\n      }\n    } else if (loadingState !== 'filtering') {\n      // If loading is no longer happening, clear any timers and hide the loading circle\n      setShowLoading(false);\n      if (timeout.current !== null) {\n        clearTimeout(timeout.current);\n        timeout.current = null;\n      }\n    }\n\n    lastInputValue.current = inputValue;\n  }, [loadingState, inputValue, showLoading]);\n\n  let onKeyDown = (e) => {\n    // Close virtual keyboard, close tray, and fire onSubmit if user hits Enter w/o any focused options\n    if (e.key === 'Enter' && state.selectionManager.focusedKey == null) {\n      popoverRef.current?.focus();\n      if (onClose) {\n        onClose();\n      }\n      if (onSubmit) {\n        onSubmit(inputValue == null ? null : inputValue.toString(), null);\n      }\n    } else {\n      if (inputProps.onKeyDown) {\n        inputProps.onKeyDown(e);\n      }\n    }\n  };\n\n  if (icon) {\n    icon = React.cloneElement(icon, {\n      UNSAFE_className: classNames(\n          textfieldStyles,\n          'spectrum-Textfield-icon'\n          ),\n      size: 'S'\n    });\n  }\n\n  return (\n    <FocusScope restoreFocus contain>\n      <div\n        {...mergeProps(overlayProps, dialogProps)}\n        ref={popoverRef}\n        className={\n          classNames(\n            searchAutocompleteStyles,\n            'tray-dialog'\n          )\n        }>\n        <DismissButton onDismiss={onClose} />\n        <TextFieldBase\n          label={label}\n          labelProps={labelProps}\n          inputProps={{...inputProps, onKeyDown}}\n          inputRef={inputRef}\n          isDisabled={isDisabled}\n          isLoading={showLoading && loadingState === 'filtering'}\n          loadingIndicator={loadingState != null ? loadingCircle : undefined}\n          validationState={validationState}\n          wrapperChildren={((state.inputValue !== '' || loadingState === 'filtering' || validationState != null) && !props.isReadOnly) ? clearButton : undefined}\n          icon={icon}\n          UNSAFE_className={\n            classNames(\n              searchStyles,\n              'spectrum-Search',\n              'spectrum-Textfield',\n              'spectrum-Search--loadable',\n              {\n                'spectrum-Search--invalid': validationState === 'invalid' && !isDisabled,\n                'spectrum-Search--valid': validationState === 'valid' && !isDisabled\n              },\n              classNames(\n                searchAutocompleteStyles,\n                'tray-textfield',\n                {\n                  'has-label': !!props.label\n                }\n              )\n            )\n          }\n          inputClassName={\n            classNames(\n              searchStyles,\n              'spectrum-Search-input'\n            )\n          }\n          validationIconClassName={\n            classNames(\n              searchStyles,\n              'spectrum-Search-validationIcon'\n            )\n          } />\n        <ListBoxBase\n          {...listBoxProps}\n          domProps={{onTouchStart, onTouchEnd}}\n          disallowEmptySelection\n          shouldSelectOnPressUp\n          focusOnPointerEnter\n          layout={layout}\n          state={state}\n          shouldUseVirtualFocus\n          renderEmptyState={() => loadingState !== 'loading' && (\n            <span className={classNames(searchAutocompleteStyles, 'no-results')}>\n              {stringFormatter.format('noResults')}\n            </span>\n          )}\n          UNSAFE_className={\n            classNames(\n              searchAutocompleteStyles,\n              'tray-listbox'\n            )\n          }\n          ref={listBoxRef}\n          onScroll={onScroll}\n          onLoadMore={onLoadMore}\n          isLoading={isLoading} />\n        <DismissButton onDismiss={onClose} />\n      </div>\n    </FocusScope>\n  );\n}\n"],"names":[],"version":3,"file":"MobileSearchAutocomplete.module.js.map"}