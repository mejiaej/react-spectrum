{"mappings":"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","sources":["packages/@react-spectrum/searchwithin/src/SearchWithin.tsx"],"sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {classNames, SlotProvider, useFocusableRef, useResizeObserver, useStyleProps} from '@react-spectrum/utils';\nimport {Field} from '@react-spectrum/label';\nimport {FocusableRef} from '@react-types/shared';\n// @ts-ignore\nimport intlMessages from '../intl/*.json';\nimport React, {useCallback, useRef, useState} from 'react';\nimport {SpectrumSearchWithinProps} from '@react-types/searchwithin';\nimport styles from '@adobe/spectrum-css-temp/components/searchwithin/vars.css';\nimport {useFormProps} from '@react-spectrum/form';\nimport {useId, useLayoutEffect} from '@react-aria/utils';\nimport {useLabel} from '@react-aria/label';\nimport {useLocalizedStringFormatter} from '@react-aria/i18n';\nimport {useProvider, useProviderProps} from '@react-spectrum/provider';\nimport {VisuallyHidden} from '@react-aria/visually-hidden';\n\n/**\n * A SearchWithin combines a SearchField and a Picker into a single group. This allows a user to constrain the scope of their search to a particular category, for example.\n */\nexport const SearchWithin = React.forwardRef(function SearchWithin(props: SpectrumSearchWithinProps, ref: FocusableRef<HTMLElement>) {\n  props = useProviderProps(props);\n  props = useFormProps(props);\n  let stringFormatter = useLocalizedStringFormatter(intlMessages, '@react-spectrum/searchwithin');\n  let {styleProps} = useStyleProps(props);\n  let {\n    children,\n    isDisabled,\n    isRequired,\n    label\n  } = props;\n\n  let defaultAriaLabel = stringFormatter.format('search');\n  if (!label && !props['aria-label'] && !props['aria-labelledby']) {\n    props['aria-label'] = defaultAriaLabel;\n  }\n  // Get label and group props (aka fieldProps)\n  let {labelProps, fieldProps} = useLabel(props);\n\n  // Grab aria-labelledby for the search input. Will need the entire concatenated aria-labelledby if it exists since pointing at the group id doesnâ€™t\n  // suffice if there is a external label\n  let labelledBy = fieldProps['aria-labelledby'] || (fieldProps['aria-label'] !== defaultAriaLabel ? fieldProps.id : '');\n  let pickerId = useId();\n\n  let domRef = useFocusableRef(ref);\n  let groupRef = useRef<HTMLDivElement>(null);\n\n  // Measure the width of the field to inform the width of the menu.\n  let [menuWidth, setMenuWidth] = useState<number | null>(null);\n  let {scale} = useProvider();\n\n  let onResize = useCallback(() => {\n    let shouldUseGroup = !!label;\n    let width = shouldUseGroup ? groupRef.current?.offsetWidth : domRef.current?.offsetWidth;\n\n    if (width && !isNaN(width)) {\n      setMenuWidth(width);\n    }\n  }, [groupRef, domRef, setMenuWidth, label]);\n\n  useResizeObserver({\n    ref: domRef,\n    onResize: onResize\n  });\n\n  useLayoutEffect(onResize, [scale, onResize]);\n\n  let defaultSlotValues = {\n    isDisabled,\n    isRequired,\n    label: null,\n    isQuiet: false,\n    validationState: null,\n    description: null,\n    errorMessage: null,\n    descriptionProps: null,\n    errorMessageProps: null,\n    'aria-label': null\n  };\n\n  let searchFieldClassName = classNames(styles, 'spectrum-SearchWithin-searchfield');\n  let pickerClassName = classNames(styles, 'spectrum-SearchWithin-picker');\n  let visuallyHiddenId = useId();\n\n  let slots = {\n    searchfield: {\n      ...defaultSlotValues,\n      UNSAFE_className: searchFieldClassName,\n      // Apply aria-labelledby of group or the group id to searchfield. No need to pass the group id (we want a new one) and aria-label (aria-labelledby will suffice)\n      'aria-labelledby': `${labelledBy} ${visuallyHiddenId} ${pickerId}`,\n      // When label is provided, input should have id referenced by htmlFor of label, instead of group\n      id: label && fieldProps.id\n    },\n    picker: {\n      ...defaultSlotValues,\n      id: pickerId,\n      UNSAFE_className: pickerClassName,\n      menuWidth,\n      align: 'end',\n      'aria-labelledby': `${labelledBy} ${visuallyHiddenId}`\n    }\n  };\n\n  if (label) {\n    // When label is provided, input should have id referenced by htmlFor of label, instead of group\n    delete fieldProps.id;\n  }\n\n  return (\n    <Field\n      {...props}\n      labelProps={labelProps}\n      ref={domRef}\n      wrapperClassName={classNames(\n        styles,\n        'spectrum-SearchWithin-container'\n      )}>\n      <div\n        {...fieldProps}\n        role=\"group\"\n        className={classNames(styles, 'spectrum-SearchWithin', styleProps.className)}\n        ref={groupRef}>\n        <VisuallyHidden id={visuallyHiddenId}>{stringFormatter.format('searchWithin')}</VisuallyHidden>\n        <SlotProvider slots={slots}>\n          {children}\n        </SlotProvider>\n      </div>\n    </Field>\n  );\n});\n"],"names":[],"version":3,"file":"SearchWithin.main.js.map"}