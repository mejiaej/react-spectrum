{"mappings":"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","sources":["packages/@react-spectrum/s2/style/style-macro.ts"],"sourcesContent":["/*\n * Copyright 2024 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport type {Condition, CSSProperties, CSSValue, CustomValue, PropertyFunction, PropertyValueDefinition, PropertyValueMap, RenderProps, ShorthandProperty, StyleFunction, StyleValue, Theme, ThemeProperties, Value} from './types';\n\nlet defaultArbitraryProperty = <T extends Value>(value: T, property: string) => ({[property]: value} as CSSProperties);\nexport function createArbitraryProperty<T extends Value>(fn: (value: T, property: string) => CSSProperties = defaultArbitraryProperty): PropertyFunction<T> {\n  return (value, property) => {\n    let selector = Array.isArray(value) ? generateArbitraryValueSelector(value.map(v => String(v)).join('')) : generateArbitraryValueSelector(String(value));\n    return {default: [fn(value, property), selector]};\n  };\n}\n\nfunction recursiveValues(obj: object): string[] {\n  return Object.values(obj).flatMap(v => typeof v === 'object' ? recursiveValues(v) : [v]);\n}\n\nexport function createMappedProperty<T extends CSSValue>(fn: (value: string, property: string) => CSSProperties, values: PropertyValueMap<T> | string[]): PropertyFunction<T> {\n  let valueMap = createValueLookup(Array.isArray(values) ? values : recursiveValues(values));\n  return (value, property) => {\n    let v = parseArbitraryValue(value);\n    if (v) {\n      return {default: [fn(v[0], property), v[1]]};\n    }\n\n    let val = Array.isArray(values) ? value : values[String(value)];\n    return mapConditionalValue(val, value => {\n      return [fn(value, property), valueMap.get(value)!];\n    });\n  };\n}\n\nexport function createRenamedProperty<T extends CSSValue>(name: string, values: PropertyValueMap<T> | string[]): PropertyFunction<T> {\n  return createMappedProperty((value, property) => ({[property.startsWith('--') ? property : name]: value}), values);\n}\n\nexport function createSizingProperty<T extends CSSValue>(values: PropertyValueMap<T>, fn: (value: number) => string): PropertyFunction<T | (number & {})> {\n  let valueMap = createValueLookup(Array.isArray(values) ? values : recursiveValues(values));\n  return (value, property) => {\n    let v = parseArbitraryValue(value);\n    if (v) {\n      return {default: [{[property]: v[0]}, v[1]]};\n    }\n\n    let val = values[String(value)];\n    if (val != null) {\n      return mapConditionalValue(val, value => {\n        return [{[property]: value}, valueMap.get(value)!];\n      });\n    }\n\n    if (typeof value === 'number') {\n      let cssValue = value === 0 ? '0px' : fn(value);\n      return {default: [{[property]: cssValue}, generateName(value + valueMap.size)]};\n    }\n\n    throw new Error('Invalid sizing value: ' + value);\n  };\n}\n\nexport type Color<C extends string> = C | `${string}/${number}`;\nexport function createColorProperty<C extends string>(colors: PropertyValueMap<C>, property?: keyof CSSProperties): PropertyFunction<Color<C>> {\n  let valueMap = createValueLookup(Object.values(colors).flatMap((v: any) => typeof v === 'object' ? Object.values(v) : [v]));\n  return (value: Color<C>, key: string) => {\n    let v = parseArbitraryValue(value);\n    if (v) {\n      return {default: [{[property || key]: v[0]}, v[1]]};\n    }\n\n    let [color, opacity] = value.split('/');\n    let c = colors[color];\n    return mapConditionalValue(c, value => {\n      let css = opacity ? `rgb(from ${value} r g b / ${opacity}%)` : value;\n      let selector = valueMap.get(value)! + (opacity ? opacity.replace('.', '-') : '');\n      return [{[property || key]: css}, selector];\n    });\n  };\n}\n\nfunction mapConditionalValue<T, U>(value: PropertyValueDefinition<T>, fn: (value: T) => U): PropertyValueDefinition<U> {\n  if (typeof value === 'object') {\n    let res: PropertyValueDefinition<U> = {};\n    for (let condition in value) {\n      res[condition] = mapConditionalValue((value as any)[condition], fn);\n    }\n    return res;\n  } else {\n    return fn(value);\n  }\n}\n\nfunction mapConditionalShorthand<T, C extends string, R extends RenderProps<string>>(value: PropertyValueDefinition<T>, fn: ShorthandProperty<T>): {[property: string]: StyleValue<Value, C, R>} {\n  if (typeof value === 'object') {\n    let res = {};\n    for (let condition in value) {\n      let properties = mapConditionalShorthand(value[condition], fn);\n      for (let property in properties) {\n        res[property] ??= {};\n        res[property][condition] = properties[property];\n      }\n    }\n    return res;\n  } else {\n    return fn(value);\n  }\n}\n\nfunction createValueLookup(values: Array<CSSValue>, atStart = false) {\n  let map = new Map<CSSValue, string>();\n  for (let value of values) {\n    if (!map.has(value)) {\n      map.set(value, generateName(map.size, atStart));\n    }\n  }\n  return map;\n}\n\nexport function parseArbitraryValue(value: any) {\n  if (typeof value === 'string' && value.startsWith('--')) {\n    return [`var(${value})`, generateArbitraryValueSelector(value)];\n  } else if (typeof value === 'string' && value[0] === '[' && value[value.length - 1] === ']') {\n    let s = generateArbitraryValueSelector(value.slice(1, -1));\n    return [value.slice(1, -1), s];\n  }\n}\n\ninterface MacroContext {\n  addAsset(asset: {type: string, content: string}): void\n}\n\nexport function createTheme<T extends Theme>(theme: T): StyleFunction<ThemeProperties<T>, 'default' | Extract<keyof T['conditions'], string>> {\n  let themePropertyMap = createValueLookup(Object.keys(theme.properties), true);\n  let themeConditionMap = createValueLookup(Object.keys(theme.conditions), true);\n  let propertyFunctions = new Map(Object.entries(theme.properties).map(([k, v]) => {\n    if (typeof v === 'function') {\n      return [k, v];\n    }\n    return [k, createMappedProperty((value, p) => ({[p]: value}), v) as PropertyFunction<Value>];\n  }));\n\n  let dependencies = new Set<string>();\n  let hasConditions = false;\n  return function style(this: MacroContext | void, style, allowedOverrides?: readonly string[]) {\n    // Check if `this` is undefined, which means style was not called as a macro but as a normal function.\n    // We also check if this is globalThis, which happens in non-strict mode bundles.\n    // Also allow style to be called as a normal function in tests.\n    // @ts-ignore\n    // eslint-disable-next-line\n    if ((this == null || this === globalThis) && process.env.NODE_ENV !== 'test') {\n      throw new Error('The style macro must be imported with {type: \"macro\"}.');\n    }\n\n    // Generate rules for each property.\n    let rules = new Map<string, Rule[]>();\n    let values =  new Map();\n    dependencies.clear();\n    let usedPriorities = 1;\n    let setRules = (key: string, value: [number, Rule[]]) => {\n      usedPriorities = Math.max(usedPriorities, value[0]);\n      rules.set(key, value[1]);\n    };\n\n    hasConditions = false;\n    for (let key in style) {\n      let value = style[key]!;\n      let themeProperty = key;\n      values.set(key, value);\n\n      // Get the type of custom properties in the theme.\n      if (key.startsWith('--')) {\n        themeProperty = value.type;\n        value = value.value;\n      }\n\n      // Expand shorthands to longhands so that merging works as expected.\n      if (theme.shorthands[key]) {\n        let shorthand = theme.shorthands[key];\n        if (typeof shorthand === 'function') {\n          let expanded = mapConditionalShorthand(value, shorthand);\n          for (let k in expanded) {\n            let v = expanded[k];\n            values.set(k, v);\n            setRules(k, compileValue(k, k, v));\n          }\n        } else {\n          for (let prop of shorthand) {\n            values.set(prop, value);\n            setRules(prop, compileValue(prop, prop, value));\n          }\n        }\n      } else if (themeProperty in theme.properties) {\n        setRules(key, compileValue(key, themeProperty, value));\n      }\n    }\n\n    // For properties referenced by self(), rewrite the declarations to assign\n    // to an intermediary custom property so we can access the value.\n    for (let dep of dependencies) {\n      let value = values.get(dep);\n      if (value != null) {\n        if (!(dep in theme.properties)) {\n          throw new Error(`Unknown dependency ${dep}`);\n        }\n        let name = `--${themePropertyMap.get(dep)}`;\n        // Could potentially use @property to prevent the var from inheriting in children.\n        setRules(name, compileValue(name, dep, value));\n        setRules(dep, compileValue(dep, dep, name));\n      }\n    }\n    dependencies.clear();\n\n    // Prevent all global styles from leaking into this element.\n    // The :not(#a#b) raises the specificity of the selector by 2 ids,\n    // which can never occur on a real element, and will win over other\n    // selectors such as class and element selectors.\n    let css = '.\\\\.:not(#a#b) { all: revert-layer }\\n\\n';\n\n    // Declare layers for each priority ahead of time so the order is always correct.\n    css += '@layer ';\n    let first = true;\n    for (let i = 0; i <= usedPriorities; i++) {\n      if (first) {\n        first = false;\n      } else {\n        css += ', ';\n      }\n      css += layerName(generateName(i, true));\n    }\n    css += ', UNSAFE_overrides;\\n\\n';\n\n    // If allowed overrides are provided, generate code to match the input override string and include only allowed classes.\n    // Also generate a variable for each overridable property that overlaps with the style definition. If those are defined,\n    // the defaults from the style definition are omitted.\n    let allowedOverridesSet = new Set<string>();\n    let js = 'let rules = \" .\";\\n';\n    if (allowedOverrides?.length) {\n      for (let property of allowedOverrides) {\n        if (themePropertyMap.has(property as string)) {\n          allowedOverridesSet.add(themePropertyMap.get(property as string)!);\n        }\n      }\n\n      js += `let matches = (overrides || '').match(/(?:^|\\\\s)(?:${[...allowedOverridesSet].join('|')})[^\\\\s]+/g) || [];\\n`;\n      js += 'rules += matches.join(\\'\\');\\n';\n      let loop = '';\n      for (let property of rules.keys()) {\n        let themeProperty = themePropertyMap.get(property);\n        if (themeProperty && allowedOverridesSet.has(themeProperty)) {\n          js += `let $${themeProperty} = false;\\n`;\n          loop += `  if (/^\\\\s*${themeProperty}/.test(p)) $${themeProperty} = true;\\n`;\n        }\n      }\n      if (loop) {\n        js += 'for (let p of matches) {\\n';\n        js += loop;\n        js += '}\\n';\n      }\n    }\n\n    // Generate JS and CSS for each rule.\n    let isStatic = !(hasConditions || allowedOverrides);\n    let className = ' .';\n    let rulesByLayer = new Map<string, string[]>();\n    for (let [property, propertyRules] of rules) {\n      if (isStatic) {\n        className += getStaticClassName(propertyRules);\n      } else {\n        let themeProperty = themePropertyMap.get(property);\n        let allowsOverrides = themeProperty && allowedOverridesSet.has(themeProperty);\n        if (allowsOverrides) {\n          // Omit the value if an override was passed in.\n          js += `if (!$${themeProperty}) {\\n`;\n        }\n        js += printJS(propertyRules) + '\\n';\n        if (allowsOverrides) {\n          js += '}\\n';\n        }\n      }\n      for (let rule of propertyRules) {\n        printRule(rule, rulesByLayer);\n      }\n    }\n\n    for (let [layer, rules] of rulesByLayer) {\n      css += `@layer ${layerName(layer)} {\\n`;\n      css += rules.join('\\n\\n');\n      css += '}\\n\\n';\n    }\n\n    if (this && typeof this.addAsset === 'function') {\n      this.addAsset({\n        type: 'css',\n        content: css\n      });\n    }\n\n    if (isStatic) {\n      return className;\n    }\n\n    js += 'return rules;';\n    if (allowedOverrides) {\n      return new Function('props', 'overrides', js) as any;\n    }\n    return new Function('props', js) as any;\n  };\n\n  function compileValue(property: string, themeProperty: string, value: StyleValue<Value, Condition<T>, any>) {\n    return conditionalToRules(value as any, 0, new Set(), new Set(), (value, priority, conditions, skipConditions) => {\n      return compileRule(property, themeProperty, value, priority, conditions, skipConditions);\n    });\n  }\n\n  function conditionalToRules<P extends CustomValue | any[]>(\n    value: PropertyValueDefinition<P>,\n    parentPriority: number,\n    currentConditions: Set<string>,\n    skipConditions: Set<string>,\n    fn: (value: P, priority: number, conditions: Set<string>, skipConditions: Set<string>) => [number, Rule[]]\n  ): [number, Rule[]] {\n    if (value && typeof value === 'object' && !Array.isArray(value)) {\n      let rules: Rule[] = [];\n\n      // Later conditions in parent rules override conditions in child rules.\n      let subSkipConditions = new Set([...skipConditions, ...Object.keys(value)]);\n\n      // Skip the default condition if we're already filtering by one of the other possible conditions.\n      // For example, if someone specifies `dark: 'gray-400'`, only include the dark version of `gray-400` from the theme.\n      let skipDefault = Object.keys(value).some(k => currentConditions.has(k));\n      let wasCSSCondition = false;\n      let priority = parentPriority;\n\n      for (let condition in value) {\n        if (skipConditions.has(condition) || (condition === 'default' && skipDefault)) {\n          continue;\n        }\n        subSkipConditions.delete(condition);\n\n        let val = value[condition];\n\n        // If a theme condition comes after runtime conditions, create a new grouping.\n        // This makes the CSS class unconditional so it appears outside the `else` block in the JS.\n        // The @layer order in the generated CSS will ensure that it overrides classes applied by runtime conditions.\n        let isCSSCondition = condition in theme.conditions || /^[@:]/.test(condition);\n        if (!wasCSSCondition && isCSSCondition && rules.length) {\n          rules = [{prelude: '', condition: '', layer: '', body: rules}];\n        }\n        wasCSSCondition = isCSSCondition;\n\n        // Increment the current priority whenever we see a new CSS condition.\n        if (isCSSCondition) {\n          priority++;\n        }\n\n        // If this is a runtime condition, inherit the priority from the parent rule.\n        // Otherwise, use the current maximum of the parent and current priorities.\n        let rulePriority = isCSSCondition ? priority : parentPriority;\n\n        if (condition === 'default' || isCSSCondition || /^is[A-Z]/.test(condition) || /^allows[A-Z]/.test(condition)) {\n          let subConditions = currentConditions;\n          if (isCSSCondition) {\n            subConditions = new Set([...currentConditions, condition]);\n          }\n          let [subPriority, subRules] = conditionalToRules(val, rulePriority, subConditions, subSkipConditions, fn);\n          rules.push(...compileCondition(currentConditions, condition, priority, subRules));\n          priority = Math.max(priority, subPriority);\n        } else if (val && typeof val === 'object' && !Array.isArray(val)) {\n          for (let key in val) {\n            let [subPriority, subRules] = conditionalToRules(val[key], rulePriority, currentConditions, subSkipConditions, fn);\n            rules.push(...compileCondition(currentConditions, `${condition} === ${JSON.stringify(key)}`, priority, subRules));\n            priority = Math.max(priority, subPriority);\n          }\n        }\n      }\n      return [priority, rules];\n    } else {\n      // @ts-ignore - broken in non-strict?\n      return fn(value, parentPriority, currentConditions, skipConditions);\n    }\n  }\n\n  function compileCondition(conditions: Set<string>, condition: string, priority: number, rules: Rule[]): Rule[] {\n    if (condition === 'default' || conditions.has(condition)) {\n      return [{prelude: '', condition: '', layer: '', body: rules}];\n    }\n\n    if (condition in theme.conditions || /^[@:]/.test(condition)) {\n      // Conditions starting with : are CSS pseudo classes. Nest them inside the parent rule.\n      let prelude = theme.conditions[condition] || condition;\n      if (prelude.startsWith(':')) {\n        return [{\n          prelude: '',\n          layer: generateName(priority, true),\n          body: rules.map(rule => nestRule(rule, prelude)),\n          condition: ''\n        }];\n      }\n\n      // Otherwise, wrap the rule in the condition (e.g. @media).\n      return [{\n        // Top level layer is based on the priority of the rule, not the condition.\n        // Also group in a sub-layer based on the condition so that lightningcss can more effectively deduplicate rules.\n        layer: `${generateName(priority, true)}.${themeConditionMap.get(condition) || generateArbitraryValueSelector(condition, true)}`,\n        prelude,\n        body: rules,\n        condition: ''\n      }];\n    }\n\n    hasConditions = true;\n    return [{prelude: '', layer: '', condition, body: rules}];\n  }\n\n  function compileRule(property: string, themeProperty: string, value: Value, priority: number, conditions: Set<string>, skipConditions: Set<string>): [number, Rule[]] {\n    // Generate selector. This consists of three parts:\n    // 1. Property. For custom properties we use a hash. For theme properties, we use the index within the theme.\n    // 2. Conditions. This uses the index within the theme.\n    // 3. Value. The index in the theme, or a hash for arbitrary values.\n    let prelude = '.';\n    if (property.startsWith('--')) {\n      // Include both custom property name and theme property in case the same var is reused between multiple theme properties.\n      prelude += generateArbitraryValueSelector(property, true) + '_' + themePropertyMap.get(themeProperty) + '-';\n    } else {\n      prelude += themePropertyMap.get(themeProperty);\n    }\n\n    let propertyFunction = propertyFunctions.get(themeProperty);\n    if (propertyFunction) {\n      // Expand value to conditional CSS values, and then to rules.\n      let res = propertyFunction(value, property);\n      return conditionalToRules(res, priority, conditions, skipConditions, (value, priority, conditions) => {\n        let [obj, p] = value;\n        let body = '';\n        for (let key in obj) {\n          let k = key as any;\n          let value = obj[k];\n          if (value === undefined) {\n            continue;\n          }\n          if (typeof value === 'string') {\n            // Replace self() references with variables and track the dependencies.\n            value = value.replace(/self\\(([a-zA-Z]+)/g, (_, v) => {\n              dependencies.add(v);\n              return `var(--${themePropertyMap.get(v)}`;\n            });\n          }\n          body += `${kebab(key)}: ${value};`;\n        }\n\n        let selector = prelude;\n        if (conditions.size > 0) {\n          for (let condition of conditions) {\n            selector += themeConditionMap.get(condition) || generateArbitraryValueSelector(condition);\n          }\n        }\n\n        let rules: Rule[] = [{\n          condition: '',\n          layer: '',\n          prelude: selector + p,\n          body\n        }];\n\n        return [0, rules];\n      });\n    } else {\n      throw new Error('Unknown property ' + themeProperty);\n    }\n  }\n}\n\nfunction nestRule(rule: Rule, prelude: string): Rule {\n  if (Array.isArray(rule.body)) {\n    return {\n      prelude: rule.prelude,\n      layer: rule.layer,\n      body: rule.body.map(r => nestRule(r, prelude)),\n      condition: rule.condition\n    };\n  } else {\n    return {\n      prelude: rule.prelude,\n      layer: rule.layer,\n      body: [{...rule, prelude: '&' + prelude}],\n      condition: ''\n    };\n  }\n}\n\nfunction kebab(property: string) {\n  if (property.startsWith('--')) {\n    return property;\n  }\n  return property.replace(/([a-z])([A-Z])/g, (_, a, b) => `${a}-${b.toLowerCase()}`);\n}\n\ninterface Rule {\n  prelude: string,\n  layer: string,\n  condition: string,\n  body: string | Rule[]\n}\n\n// Generate a class name from a number, e.g. index within the theme.\n// This maps to an alphabet containing lower case letters, upper case letters, and numbers.\n// For numbers larger than 62, an underscore is prepended.\n// This encoding allows easy parsing to enable runtime merging by property.\nfunction generateName(index: number, atStart = false): string {\n  if (index < 26) {\n    // lower case letters\n    return String.fromCharCode(index + 97);\n  }\n\n  if (index < 52) {\n    // upper case letters\n    return String.fromCharCode((index - 26) + 65);\n  }\n\n  if (index < 62 && !atStart) {\n    // numbers\n    return String.fromCharCode((index - 52) + 48);\n  }\n\n  return '_' + generateName(index - (atStart ? 52 : 62));\n}\n\n// For arbitrary values, we use a hash of the string to generate the class name.\nfunction generateArbitraryValueSelector(v: string, atStart = false) {\n  let c = hash(v).toString(36);\n  if (atStart && /^[0-9]/.test(c)) {\n    c = `_${c}`;\n  }\n  return `-${c}`;\n}\n\n// djb2 hash function.\n// http://www.cse.yorku.ca/~oz/hash.html\nfunction hash(v: string) {\n  let hash = 5381;\n  for (let i = 0; i < v.length; i++) {\n    hash = ((hash << 5) + hash) + v.charCodeAt(i) >>> 0;\n  }\n  return hash;\n}\n\nfunction layerName(name: string) {\n  // All of our layers should be sub-layers of a single parent layer, so that\n  // the unsafe overrides layer always comes after.\n  return `_.${name}`;\n}\n\nfunction printRule(rule: Rule, rulesByLayer: Map<string, string[]>, preludes: string[] = [], layer = 'a') {\n  if (rule.prelude) {\n    preludes.push(rule.prelude);\n  }\n\n  if (typeof rule.body === 'string') {\n    // Nest rule in our stack of preludes (e.g. media queries/selectors).\n    let content = '  ';\n    preludes.forEach((p, i) => {\n      content += `${p} {\\n${' '.repeat((i + 2) * 2)}`;\n    });\n    content += rule.body + '\\n';\n    preludes.map((_, i) => {\n      content += `${' '.repeat((preludes.length - i) * 2)}}\\n`;\n    });\n\n    // Group rule into the appropriate layer.\n    let rules = rulesByLayer.get(rule.layer || layer);\n    if (!rules) {\n      rules = [];\n      rulesByLayer.set(rule.layer || layer, rules);\n    }\n    rules.push(content);\n  } else {\n    for (let b of rule.body) {\n      printRule(b, rulesByLayer, preludes, rule.layer || layer);\n    }\n  }\n\n  if (rule.prelude) {\n    preludes.pop();\n  }\n}\n\nfunction printJS(rules: Rule[], indent = ''): string {\n  rules = rules.slice().reverse();\n\n  let conditional = rules.filter(rule => rule.condition).map((rule, i) => {\n    return `${i > 0 ? ' else ' : ''}if (props.${rule.condition}) {\\n${indent}  ${printRuleChildren(rule, indent + '  ')}\\n${indent}}`;\n  });\n\n  let elseCases = rules.filter(rule => !rule.condition).map(rule => printRuleChildren(rule, indent + '  '));\n\n  if (conditional.length && elseCases.length) {\n    return `${conditional.join('')} else {\\n${indent}  ${elseCases.join('\\n' + indent + '  ')}\\n${indent}}`;\n  }\n\n  if (conditional.length) {\n    return conditional.join('');\n  }\n\n  return elseCases.join('\\n' + indent);\n}\n\nfunction printRuleChildren(rule: Rule, indent = '') {\n  let res = '';\n  if (rule.prelude.startsWith('.')) {\n    res +=  `rules += ' ${rule.prelude.slice(1)}';`;\n  }\n\n  if (Array.isArray(rule.body)) {\n    res += printJS(rule.body, indent);\n  }\n\n  return res;\n}\n\nfunction getStaticClassName(rules: Rule[]): string {\n  return rules.map(rule => (rule.prelude.startsWith('.') ? ' ' + rule.prelude.slice(1) : '') + (Array.isArray(rule.body) ? getStaticClassName(rule.body) : '')).join('');\n}\n\nexport function raw(this: MacroContext | void, css: string, layer = '_.a') {\n  // Check if `this` is undefined, which means style was not called as a macro but as a normal function.\n  // We also check if this is globalThis, which happens in non-strict mode bundles.\n  // Also allow style to be called as a normal function in tests.\n  // @ts-ignore\n  // eslint-disable-next-line\n  if ((this == null || this === globalThis) && process.env.NODE_ENV !== 'test') {\n    throw new Error('The raw macro must be imported with {type: \"macro\"}.');\n  }\n  let className = generateArbitraryValueSelector(css, true);\n  css = `@layer ${layer} {\n  .${className} {\n  ${css}\n  }\n}`;\n  if (this && typeof this.addAsset === 'function') {\n    this.addAsset({\n      type: 'css',\n      content: css\n    });\n  }\n  return className;\n}\n\nexport function keyframes(this: MacroContext | void, css: string) {\n  // Check if `this` is undefined, which means style was not called as a macro but as a normal function.\n  // We also check if this is globalThis, which happens in non-strict mode bundles.\n  // Also allow style to be called as a normal function in tests.\n  // @ts-ignore\n  // eslint-disable-next-line\n  if ((this == null || this === globalThis) && process.env.NODE_ENV !== 'test') {\n    throw new Error('The keyframes macro must be imported with {type: \"macro\"}.');\n  }\n  let name = generateArbitraryValueSelector(css, true);\n  css = `@keyframes ${name} {\n  ${css}\n}`;\n  if (this && typeof this.addAsset === 'function') {\n    this.addAsset({\n      type: 'css',\n      content: css\n    });\n  }\n  return name;\n}\n"],"names":[],"version":3,"file":"style-macro.cjs.map","sourceRoot":"../../../../../"}