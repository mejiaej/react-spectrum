{"mappings":";;;;;;;;AAAA;;;;;;;;;;CAUC;AAKM,SAAS,0CAAiB,MAAqB,EAAE,OAA6B;IACnF,IAAI,eAAsB;QAAC,CAAC;KAAE;IAC9B,IAAK,IAAI,IAAI,GAAG,IAAI,OAAO,MAAM,EAAE,IAAK;QACtC,IAAI,MAAM,aAAa,MAAM;QAC7B,IAAK,IAAI,IAAI,GAAG,IAAI,KAAK,IAAK;YAC5B,IAAI,CAAC,KAAK,MAAM,GAAG,OAAO,OAAO,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC,EAAE;YAE/C,kFAAkF;YAClF,IAAI,MAAM,OAAO,CAAC,QAChB,MAAM,OAAO,CAAC,CAAA;gBACZ,IAAI,SAAS,CAAA,GAAA,gCAAS,EAAE,YAAY,CAAC,EAAE,EAAE;oBAAC,CAAC,IAAI,EAAE;gBAAK;gBACtD,IAAI,CAAE,CAAA,WAAW,QAAQ,OAAM,GAC7B,aAAa,IAAI,CAAC;YAEtB;iBACK;gBACL,IAAI,SAAS,CAAA,GAAA,gCAAS,EAAE,YAAY,CAAC,EAAE,EAAE,MAAM,CAAC,EAAE;gBAClD,IAAI,IAAI,KAAK,SAAS,CAAC;gBACvB,IAAI,aAAa,IAAI,CAAC,CAAA,IAAK,KAAK,SAAS,CAAC,OAAO,IAC/C;gBAGF,IAAI,CAAE,CAAA,WAAW,QAAQ,OAAM,GAC7B,aAAa,IAAI,CAAC;YAEtB;QACF;IACF;IAEA,OAAO;AACT","sources":["packages/@react-spectrum/story-utils/src/GeneratePowerset.tsx"],"sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {mergeProps} from '@react-aria/utils';\n\n// Generate a powerset from a given array of states/options,\nexport function generatePowerset(states: Array<object>, exclude?: (merged) => boolean) {\n  let combinations: any[] = [{}];\n  for (let i = 0; i < states.length; i++) {\n    let len = combinations.length;\n    for (let j = 0; j < len; j++) {\n      let [key, value] = Object.entries(states[i])[0];\n\n      // If one of the states/options has multiple values, create a combination for each\n      if (Array.isArray(value)) {\n        value.forEach(state => {\n          let merged = mergeProps(combinations[j], {[key]: state});\n          if (!(exclude && exclude(merged))) {\n            combinations.push(merged);\n          }\n        });\n      } else {\n        let merged = mergeProps(combinations[j], states[i]);\n        let s = JSON.stringify(merged);\n        if (combinations.some(c => JSON.stringify(c) === s)) {\n          continue;\n        }\n\n        if (!(exclude && exclude(merged))) {\n          combinations.push(merged);\n        }\n      }\n    }\n  }\n\n  return combinations;\n}\n"],"names":[],"version":3,"file":"GeneratePowerset.main.js.map"}