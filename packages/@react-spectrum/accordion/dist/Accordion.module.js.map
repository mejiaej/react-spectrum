{"mappings":"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","sources":["packages/@react-spectrum/accordion/src/Accordion.tsx"],"sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {AriaLabelingProps, DOMProps, DOMRef, forwardRefType, StyleProps} from '@react-types/shared';\nimport {Button, DisclosureGroup, DisclosureGroupProps, DisclosurePanelProps, DisclosureProps, Heading, Disclosure as RACDisclosure, DisclosurePanel as RACDisclosurePanel} from 'react-aria-components';\nimport ChevronLeftMedium from '@spectrum-icons/ui/ChevronLeftMedium';\nimport ChevronRightMedium from '@spectrum-icons/ui/ChevronRightMedium';\nimport {classNames, useDOMRef, useStyleProps} from '@react-spectrum/utils';\nimport React, {createContext, forwardRef} from 'react';\nimport styles from '@adobe/spectrum-css-temp/components/accordion/vars.css';\nimport {useLocale} from '@react-aria/i18n';\nimport {useProviderProps} from '@react-spectrum/provider';\n\nexport interface SpectrumAccordionProps extends Omit<DisclosureGroupProps, 'className' | 'style' | 'children'>, StyleProps, DOMProps {\n  /** Whether the Accordion should be displayed with a quiet style. */\n  isQuiet?: boolean,\n  /** The disclosures within the accordion group. */\n  children: React.ReactNode\n}\n\nconst InternalAccordionContext = createContext<{isQuiet: boolean} | null>(null);\n\n/** A group of disclosures that can be expanded and collapsed. */\nexport const Accordion = /*#__PURE__*/(forwardRef as forwardRefType)(function Accordion(props: SpectrumAccordionProps, ref: DOMRef<HTMLDivElement>) {\n  props = useProviderProps(props);\n  let {styleProps} = useStyleProps(props);\n  let domRef = useDOMRef(ref);\n  return (\n    <InternalAccordionContext.Provider value={{isQuiet: props.isQuiet || false}}>\n      <DisclosureGroup\n        {...props}\n        {...styleProps}\n        ref={domRef}\n        className={classNames(styles, 'spectrum-Accordion', styleProps.className)}>\n        {props.children}\n      </DisclosureGroup>\n    </InternalAccordionContext.Provider>\n  );\n});\n\nexport interface SpectrumDisclosureProps extends Omit<DisclosureProps, 'className' | 'style' | 'children'>, AriaLabelingProps, StyleProps {\n  /** Whether the Disclosure should be displayed with a quiet style. */\n  isQuiet?: boolean,\n  /** The contents of the disclosure. The first child should be the header, and the second child should be the panel. */\n  children: React.ReactNode\n}\n\n/** A collapsible section of content composed of a heading that expands and collapses a panel. */\nexport const Disclosure = /*#__PURE__*/(forwardRef as forwardRefType)(function Disclosure(props: SpectrumDisclosureProps, ref: DOMRef<HTMLDivElement>) {\n  props = useProviderProps(props);\n  let {styleProps} = useStyleProps(props);\n  let domRef = useDOMRef(ref);\n  let accordionContext = React.useContext(InternalAccordionContext)!;\n  return (\n    <RACDisclosure\n      {...props}\n      {...styleProps}\n      ref={domRef}\n      className={({isExpanded, isDisabled}) => classNames(styles, 'spectrum-Accordion-item', {\n        'spectrum-Accordion-item--quiet': accordionContext?.isQuiet ?? props.isQuiet,\n        'is-expanded': isExpanded,\n        'is-disabled': isDisabled,\n        'in-accordion': accordionContext != null\n      }, styleProps.className)}>\n      {props.children}\n    </RACDisclosure>\n  );\n});\n\nexport interface SpectrumDisclosurePanelProps extends Omit<DisclosurePanelProps, 'className' | 'style' | 'children'>, DOMProps, AriaLabelingProps, StyleProps {\n  /** The contents of the accordion panel. */\n  children: React.ReactNode\n}\n\n/** The panel that contains the content of the disclosure. */\nexport const DisclosurePanel = /*#__PURE__*/(forwardRef as forwardRefType)(function DisclosurePanel(props: SpectrumDisclosurePanelProps, ref: DOMRef<HTMLDivElement>) {\n  let {styleProps} = useStyleProps(props);\n  let domRef = useDOMRef(ref);\n  return (\n    <RACDisclosurePanel\n      ref={domRef}\n      {...styleProps as Omit<React.HTMLAttributes<HTMLElement>, 'role'>}\n      className={classNames(styles, 'spectrum-Accordion-itemContent', styleProps.className)} \n      {...props}>\n      {props.children}\n    </RACDisclosurePanel>\n  );\n});\n\nexport interface SpectrumDisclosureTitleProps extends DOMProps, AriaLabelingProps, StyleProps {\n  /**\n   * The heading level of the disclosure header.\n   * @default 3\n   */\n  level?: number,\n  /** The contents of the disclosure header. */\n  children: React.ReactNode\n}\n\n/** The heading of the disclosure. */\nexport const DisclosureTitle = /*#__PURE__*/(forwardRef as forwardRefType)(function DisclosureTitle(props: SpectrumDisclosureTitleProps, ref: DOMRef<HTMLHeadingElement>) {\n  let {styleProps} = useStyleProps(props);\n  let {level = 3} = props;\n  let {direction} = useLocale();\n  let domRef = useDOMRef(ref);\n  return (\n    <Heading ref={domRef} level={level} {...styleProps} className={classNames(styles, 'spectrum-Accordion-itemHeading', styleProps.className)}>\n      <Button\n        slot=\"trigger\"\n        className={({isHovered, isFocusVisible, isPressed}) => classNames(styles, 'spectrum-Accordion-itemHeader', {\n          'is-hovered': isHovered,\n          'is-pressed': isPressed,\n          'focus-ring': isFocusVisible\n        })}>\n        {direction === 'ltr' ? (\n          <ChevronRightMedium\n            aria-hidden=\"true\"\n            UNSAFE_className={classNames(styles, 'spectrum-Accordion-itemIndicator')} />\n              ) : (\n                <ChevronLeftMedium\n                  aria-hidden=\"true\"\n                  UNSAFE_className={classNames(styles, 'spectrum-Accordion-itemIndicator')} />\n              )}\n        {props.children}\n      </Button>\n    </Heading>\n  );\n});\n"],"names":[],"version":3,"file":"Accordion.module.js.map"}