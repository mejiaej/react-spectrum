{"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;;;;;;;CAUC;;;;;;;;;;;;;;AAkCM,MAAM,4CAAQ;IACnB,MAAM,CAAA,GAAA,0DAAS;IACf,UAAU,CAAA,GAAA,2DAAU;IACpB,UAAU,CAAA,GAAA,6DAAY;AACxB;AAEO,MAAM,0DAAQ,CAAA,GAAA,sCAAI,EAAE,UAAU,CAAC,SAAS,MAAM,KAAyB,EAAE,GAA2B;IACzG,IAAI,EACF,OAAO,OACL,GAAG,aACH,SAAS,EACT,SAAS,YACP,QAAQ,WACR,OAAO,eACP,WAAW,YACX,QAAQ,uBACR,mBAAmB,EACpB,EACF,SACD,KAAK,EACL,GAAG,YACJ,GAAG;IACJ,IAAI,SAAS,CAAA,GAAA,mCAAQ,EAAE;IACvB,IAAI,oBACF,gBAAgB,cAChB,UAAU,cACV,UAAU,gBACV,YAAY,EACb,GAAG,CAAA,GAAA,8BAAO,EAAE,OAAO,OAAO;IAC3B,IAAI,cAAC,UAAU,EAAC,GAAG,CAAA,GAAA,uCAAY,EAAE;IAEjC,IAAI,kBAAkB,CAAA,GAAA,gDAA0B,EAAE,CAAA,GAAA,mDAAW,GAAG;IAChE,IAAI,YAAY,WAAW,YAAY,YAAY,gBAAgB,MAAM,CAAC,WAAW;IACrF,IAAI,OAAO,yCAAK,CAAC,QAAQ;IACzB,IAAI,kBAAC,cAAc,cAAE,UAAU,EAAC,GAAG,CAAA,GAAA,kCAAW;IAE9C,MAAM,eAAe;QACnB,IAAI,UACF;QAGF,IAAI,qBACF,MAAM,KAAK,CAAC;IAEhB;IAEA,qBACE,0DAAC;QACE,GAAG,UAAU;QACb,GAAG,CAAA,GAAA,gCAAS,EAAE,YAAY,WAAW;QACrC,GAAG,CAAA,GAAA,oCAAa,EAAE,MAAM,KAAK,CAAC,OAAO,CAAC;QACvC,KAAK;QACL,WAAW,CAAA,GAAA,oCAAS,EAAE,CAAA,GAAA,mDAAK,GACzB,kBACA;YAAC,CAAC,qBAAqB,QAAQ,EAAE;QAAO,GACxC,WAAW,SAAS,EACpB,CAAA,GAAA,oCAAS,EACP,CAAA,GAAA,mDAAmB,GACnB,kBACA;YAAC,cAAc;QAAc;QAGjC,OAAO;YACL,GAAG,WAAW,KAAK;YACnB,QAAQ,MAAM,KAAK,CAAC,QAAQ;QAC9B;QACA,kBAAgB;QAChB,gBAAgB;YACd,IAAI,cAAc,WAChB,MAAM,MAAM,CAAC;QAEjB;qBACA,0DAAC;QACE,GAAG,YAAY;QAChB,WAAW,CAAA,GAAA,oCAAS,EAAE,CAAA,GAAA,mDAAmB,GAAG;OAC3C,sBACC,0DAAC;QACC,cAAY;QACZ,kBAAkB,CAAA,GAAA,oCAAS,EAAE,CAAA,GAAA,mDAAK,GAAG;sBAEzC,0DAAC;QAAI,WAAW,CAAA,GAAA,oCAAS,EAAE,CAAA,GAAA,mDAAK,GAAG;QAAwB,MAAK;qBAC9D,0DAAC;QAAI,WAAW,CAAA,GAAA,oCAAS,EAAE,CAAA,GAAA,mDAAK,GAAG;QAA2B,MAAK;QAAgB,GAAG,UAAU;OAAG,WAClG,6BACC,0DAAC,CAAA,GAAA,iCAAK;QACJ,SAAS;QACT,kBAAkB,CAAA,GAAA,oCAAS,EAAE,CAAA,GAAA,mDAAK,GAAG;QACrC,SAAQ;QACR,aAAY;OACX,8BAKT,0DAAC;QAAI,WAAW,CAAA,GAAA,oCAAS,EAAE,CAAA,GAAA,mDAAK,GAAG;qBACjC,0DAAC,CAAA,GAAA,sCAAU;QAAG,GAAG,gBAAgB;QAAE,SAAQ;qBACzC,0DAAC,CAAA,GAAA,2DAAU;AAKrB","sources":["packages/@react-spectrum/toast/src/Toast.tsx"],"sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport AlertMedium from '@spectrum-icons/ui/AlertMedium';\nimport {Button, ClearButton} from '@react-spectrum/button';\nimport {classNames, useDOMRef, useStyleProps} from '@react-spectrum/utils';\nimport CrossMedium from '@spectrum-icons/ui/CrossMedium';\nimport {DOMProps, DOMRef} from '@react-types/shared';\nimport {filterDOMProps, mergeProps} from '@react-aria/utils';\nimport InfoMedium from '@spectrum-icons/ui/InfoMedium';\n// @ts-ignore\nimport intlMessages from '../intl/*.json';\nimport {QueuedToast, ToastState} from '@react-stately/toast';\nimport React from 'react';\nimport styles from '@adobe/spectrum-css-temp/components/toast/vars.css';\nimport SuccessMedium from '@spectrum-icons/ui/SuccessMedium';\nimport toastContainerStyles from './toastContainer.css';\nimport {useFocusRing} from '@react-aria/focus';\nimport {useLocalizedStringFormatter} from '@react-aria/i18n';\nimport {useToast} from '@react-aria/toast';\n\nexport interface SpectrumToastValue extends DOMProps {\n  children: string,\n  variant: 'positive' | 'negative' | 'info' | 'neutral',\n  actionLabel?: string,\n  onAction?: () => void,\n  shouldCloseOnAction?: boolean\n}\n\nexport interface SpectrumToastProps {\n  toast: QueuedToast<SpectrumToastValue>,\n  state: ToastState<SpectrumToastValue>\n}\n\n// TODO: express should use filled icons...\nexport const ICONS = {\n  info: InfoMedium,\n  negative: AlertMedium,\n  positive: SuccessMedium\n};\n\nexport const Toast = React.forwardRef(function Toast(props: SpectrumToastProps, ref: DOMRef<HTMLDivElement>) {\n  let {\n    toast: {\n      key,\n      animation,\n      content: {\n        children,\n        variant,\n        actionLabel,\n        onAction,\n        shouldCloseOnAction\n      }\n    },\n    state,\n    ...otherProps\n  } = props;\n  let domRef = useDOMRef(ref);\n  let {\n    closeButtonProps,\n    titleProps,\n    toastProps,\n    contentProps\n  } = useToast(props, state, domRef);\n  let {styleProps} = useStyleProps(otherProps);\n\n  let stringFormatter = useLocalizedStringFormatter(intlMessages, '@react-spectrum/toast');\n  let iconLabel = variant && variant !== 'neutral' ? stringFormatter.format(variant) : null;\n  let Icon = ICONS[variant];\n  let {isFocusVisible, focusProps} = useFocusRing();\n\n  const handleAction = () => {\n    if (onAction) {\n      onAction();\n    }\n\n    if (shouldCloseOnAction) {\n      state.close(key);\n    }\n  };\n\n  return (\n    <div\n      {...styleProps}\n      {...mergeProps(toastProps, focusProps)}\n      {...filterDOMProps(props.toast.content)}\n      ref={domRef}\n      className={classNames(styles,\n        'spectrum-Toast',\n        {['spectrum-Toast--' + variant]: variant},\n        styleProps.className,\n        classNames(\n          toastContainerStyles,\n          'spectrum-Toast',\n          {'focus-ring': isFocusVisible}\n        )\n      )}\n      style={{\n        ...styleProps.style,\n        zIndex: props.toast.priority\n      }}\n      data-animation={animation}\n      onAnimationEnd={() => {\n        if (animation === 'exiting') {\n          state.remove(key);\n        }\n      }}>\n      <div\n        {...contentProps}\n        className={classNames(toastContainerStyles, 'spectrum-Toast-contentWrapper')}>\n        {Icon &&\n          <Icon\n            aria-label={iconLabel}\n            UNSAFE_className={classNames(styles, 'spectrum-Toast-typeIcon')} />\n        }\n        <div className={classNames(styles, 'spectrum-Toast-body')} role=\"presentation\">\n          <div className={classNames(styles, 'spectrum-Toast-content')} role=\"presentation\" {...titleProps}>{children}</div>\n          {actionLabel &&\n            <Button\n              onPress={handleAction}\n              UNSAFE_className={classNames(styles, 'spectrum-Button')}\n              variant=\"secondary\"\n              staticColor=\"white\">\n              {actionLabel}\n            </Button>\n          }\n        </div>\n      </div>\n      <div className={classNames(styles, 'spectrum-Toast-buttons')}>\n        <ClearButton {...closeButtonProps} variant=\"overBackground\">\n          <CrossMedium />\n        </ClearButton>\n      </div>\n    </div>\n  );\n});\n"],"names":[],"version":3,"file":"Toast.main.js.map"}